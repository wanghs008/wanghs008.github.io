<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Doppler Shift</title>
      <link href="/2021/09/14/DopplerShift/"/>
      <url>/2021/09/14/DopplerShift/</url>
      
        <content type="html"><![CDATA[<h1 id="多普勒"><a href="#多普勒" class="headerlink" title="多普勒"></a>多普勒</h1><h2 id="多普勒-1"><a href="#多普勒-1" class="headerlink" title="多普勒"></a>多普勒</h2><h3 id="多普勒多普勒"><a href="#多普勒多普勒" class="headerlink" title="多普勒多普勒"></a>多普勒多普勒</h3><p>disp([‘my test=’,num2str(x),’%’]);</p>]]></content>
      
      
      <categories>
          
          <category> Rader </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rader </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Program Display</title>
      <link href="/2021/09/08/ProgramDisplay/"/>
      <url>/2021/09/08/ProgramDisplay/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>在编写Matlab程序的过程中，有时候我们希望将比较关键的一些变量或者是经过一定计算得到的变量显示出来，有时候我们希望在进行较长时间的for循环的时候将进度条显示出来，虽然这些功能并不会影响我们程序整体运行，甚至可以说可有可无，但增加了这些程序后产生的视觉效果可能会使我们对程序运行结果有一个大概的了解。</p><p><strong>下面我就以上两个方面进行一个简单的介绍：</strong></p><h2 id="显示输出函数："><a href="#显示输出函数：" class="headerlink" title="显示输出函数："></a>显示输出函数：</h2><h3 id="disp"><a href="#disp" class="headerlink" title="disp"></a><code>disp</code></h3><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="built_in">disp</span>([<span class="string">&#x27;my test=&#x27;</span>,num2str(x),<span class="string">&#x27;%&#x27;</span>]);</span><br></pre></td></tr></table></figure><blockquote><p>disp函数类似于C语言中的print函数，可以同时输出字符串和数字(使用num2str函数转换为字符串或字符向量)。</p></blockquote><p>因此我们可以采用disp函数和num2str函数将想要知道的变量显示在Matlab的命令行窗口。</p><h3 id="sprintf"><a href="#sprintf" class="headerlink" title="sprintf"></a><code>sprintf</code></h3><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">st = sprintf(<span class="string">&#x27;my test=%a.bd&#x27;</span>,x);  <span class="comment">% 有符号整型</span></span><br><span class="line">st = sprintf(<span class="string">&#x27;my test=%a.be&#x27;</span>,x);  <span class="comment">% 定点浮点型</span></span><br><span class="line">st = sprintf(<span class="string">&#x27;my test=%a.bf&#x27;</span>,x);  <span class="comment">% 指数浮点型</span></span><br><span class="line">st = sprintf(<span class="string">&#x27;my test=%a.bg&#x27;</span>,x);  <span class="comment">% 紧凑浮点型</span></span><br><span class="line"><span class="built_in">disp</span>(st);</span><br></pre></td></tr></table></figure><blockquote><p>sprintf函数可以将数据格式转换为字符串或字符向量，相比于num2str函数，它可以指定格式化操作符格式化数据，因此使用起来更加灵活。</p><p>其中，%为数据格式符，因此%到d/e/f/g之间的字符是不显示的，它只是指出数据的格式，同时a.b表示数字的长度为a位，小数点后b位。</p></blockquote><h3 id="disp-sprintf"><a href="#disp-sprintf" class="headerlink" title="disp+sprintf"></a><code>disp+sprintf</code></h3><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="built_in">disp</span>([<span class="string">&#x27;my test=&#x27;</span>,sprintf(<span class="string">&#x27;%a.bf&#x27;</span>,x)]);</span><br></pre></td></tr></table></figure><p>通过以上分析，采用disp函数和sprintf函数可以帮助我们更加方便的显示数据，因此建议使用。</p><h2 id="显示进度条函数："><a href="#显示进度条函数：" class="headerlink" title="显示进度条函数："></a>显示进度条函数：</h2><p>进度条显示包含以下四个部分：</p><h3 id="窗口打开部分"><a href="#窗口打开部分" class="headerlink" title="窗口打开部分"></a><code>窗口打开部分</code></h3><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">wait_title = waitbar(<span class="number">0</span>,<span class="string">&#x27;Program Initializing ...&#x27;</span>);  </span><br></pre></td></tr></table></figure><h3 id="数据更新部分"><a href="#数据更新部分" class="headerlink" title="数据更新部分"></a><code>数据更新部分</code></h3><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">Display_Data = num2str(roundn(<span class="built_in">i</span>/N*<span class="number">100</span>,<span class="number">-1</span>));</span><br><span class="line">Display_Str  = [<span class="string">&#x27;Computation Progress ... &#x27;</span>,Display_Data,<span class="string">&#x27;%&#x27;</span>];</span><br></pre></td></tr></table></figure><h3 id="动态显示部分"><a href="#动态显示部分" class="headerlink" title="动态显示部分"></a><code>动态显示部分</code></h3><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">waitbar(<span class="built_in">i</span>/N,wait_title,Display_Str) </span><br></pre></td></tr></table></figure><h3 id="窗口关闭部分"><a href="#窗口关闭部分" class="headerlink" title="窗口关闭部分"></a><code>窗口关闭部分</code></h3><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">close(wait_title);</span><br></pre></td></tr></table></figure><p>通过以上四个部分与for循环的结合，我们可以得到基本的进度条函数：</p><h3 id="基本进度条函数"><a href="#基本进度条函数" class="headerlink" title="基本进度条函数"></a><code>基本进度条函数</code></h3><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">wait_title = waitbar(<span class="number">0</span>,<span class="string">&#x27;Program Initializing ...&#x27;</span>);  </span><br><span class="line">pause(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:N</span><br><span class="line"></span><br><span class="line">    <span class="comment">%%%%%%%</span></span><br><span class="line">    <span class="comment">%代码块</span></span><br><span class="line">    <span class="comment">%%%%%%%</span></span><br><span class="line"></span><br><span class="line">    pause(<span class="number">0.001</span>);</span><br><span class="line">    Display_Data = num2str(roundn(<span class="built_in">i</span>/N*<span class="number">100</span>,<span class="number">-1</span>));</span><br><span class="line">    Display_Str  = [<span class="string">&#x27;Computation Progress ... &#x27;</span>,Display_Data,<span class="string">&#x27;%&#x27;</span>];</span><br><span class="line">    waitbar(<span class="built_in">i</span>/N,wait_title,Display_Str) </span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">pause(<span class="number">1</span>);</span><br><span class="line">close(wait_title);</span><br></pre></td></tr></table></figure><blockquote><p>一般情况下，pause(a)表示程序暂停a秒后继续执行，若pause()无参数，则表示程序暂停，按任意键程序继续执行。</p></blockquote><p>执行效果如下：</p><div align=center><img width="61.8%" height="61.8%" src="https://i.loli.net/2021/09/08/8HC9NomQLW6lbpe.png" alt="randn"/></div><p>如果我们想知道程序在这个循环下运行了多长时间，那么我们在基本进度条函数下添加计时子函数，就得到了计时进度条函数：</p><h3 id="计时进度条函数"><a href="#计时进度条函数" class="headerlink" title="计时进度条函数"></a><code>计时进度条函数</code></h3><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">tic</span><br><span class="line">wait_title = waitbar(<span class="number">0</span>,<span class="string">&#x27;Program Initializing ...&#x27;</span>);  </span><br><span class="line">pause(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:N</span><br><span class="line"></span><br><span class="line">    <span class="comment">%%%%%%%</span></span><br><span class="line">    <span class="comment">%代码块</span></span><br><span class="line">    <span class="comment">%%%%%%%</span></span><br><span class="line"></span><br><span class="line">    pause(<span class="number">0.001</span>);</span><br><span class="line">    Time_Trans   = Time_Transform(toc);</span><br><span class="line">    Time_Disp    = Time_Display(Time_Trans);</span><br><span class="line">    Display_Data = num2str(roundn(<span class="built_in">i</span>/N*<span class="number">100</span>,<span class="number">-1</span>));</span><br><span class="line">    Display_Str  = [<span class="string">&#x27;Computation Progress ... &#x27;</span>,Display_Data,<span class="string">&#x27;%&#x27;</span>,<span class="string">&#x27; --- &#x27;</span>,...</span><br><span class="line">                    <span class="string">&#x27;Using Time: &#x27;</span>,Time_Disp];</span><br><span class="line">    waitbar(<span class="built_in">i</span>/N,wait_title,Display_Str) </span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">pause(<span class="number">1</span>);</span><br><span class="line">close(wait_title);</span><br><span class="line">toc</span><br></pre></td></tr></table></figure><h4 id="时间转换函数"><a href="#时间转换函数" class="headerlink" title="时间转换函数"></a>时间转换函数</h4><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">y</span> = <span class="title">Time_Transform</span><span class="params">(u)</span></span></span><br><span class="line">    Time_in = u(<span class="number">1</span>);</span><br><span class="line">    Hours   = <span class="built_in">fix</span>(Time_in/<span class="number">3600</span>);</span><br><span class="line">    Minutes = <span class="built_in">fix</span>((Time_in-Hours*<span class="number">3600</span>)/<span class="number">60</span>);</span><br><span class="line">    Seconds = <span class="built_in">fix</span>(Time_in-Hours*<span class="number">3600</span>-Minutes*<span class="number">60</span>);</span><br><span class="line">    Time_out = [Hours Minutes Seconds];</span><br><span class="line">    y = Time_out;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="时间显示函数"><a href="#时间显示函数" class="headerlink" title="时间显示函数"></a>时间显示函数</h4><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">y</span> = <span class="title">Time_Display</span><span class="params">(u)</span></span></span><br><span class="line">    Hours   = u(<span class="number">1</span>);</span><br><span class="line">    Minutes = u(<span class="number">2</span>);</span><br><span class="line">    Seconds = u(<span class="number">3</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> Hours == <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> Minutes == <span class="number">0</span></span><br><span class="line">            Time_out = [num2str(Seconds),<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;s&#x27;</span>];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            Time_out = [num2str(Minutes),<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;&#x27;</span>,...</span><br><span class="line">                            num2str(Seconds),<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;s&#x27;</span>];</span><br><span class="line">        <span class="keyword">end</span> </span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        Time_out = [num2str(  Hours),<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;&#x27;</span>,...</span><br><span class="line">                        num2str(Minutes),<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;&#x27;</span>,...</span><br><span class="line">                        num2str(Seconds),<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;s&#x27;</span>];</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    y = Time_out;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>执行效果如下：</p><div align=center><img width="61.8%" height="61.8%" src="https://i.loli.net/2021/09/08/3xipLr7mKtgAyT8.png" alt="randn"/></div><pre><code>我们有时候后不可避免地需要进行大容量数据处理、多仿真结果对比以及复杂算法执行过程监测等，通常而言，数据处理需要耗时几分钟至数小时不等，我们可以采用waitbar函数预测程序执行进度及剩余时间，并希望借此提高我们的工作效率。</code></pre><p><strong>本文作者水平有限，如有错误，恳请批评指正！</strong></p>]]></content>
      
      
      <categories>
          
          <category> Matlab </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Matlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>White Guassion Noise</title>
      <link href="/2021/08/26/WhiteGuassionNoise/"/>
      <url>/2021/08/26/WhiteGuassionNoise/</url>
      
        <content type="html"><![CDATA[<h2 id="高斯白噪声生成函数"><a href="#高斯白噪声生成函数" class="headerlink" title="高斯白噪声生成函数"></a>高斯白噪声生成函数</h2><p>高斯白噪声的概率密度服从高斯分布，即正态分布:</p><script type="math/tex; mode=display">f(x)=\frac{1}{\sqrt{2\pi}\sigma}\exp\left\{ -\frac{(x-\mu)^2}{2\sigma^2} \right\}</script><p>其中有$\mu$(平均值)和$\sigma$(标准差)两个参数。</p><blockquote><p>如果一个噪声，它的幅度分布服从高斯分布，而它的功率谱密度又是均匀分布的，则称它为高斯白噪声。</p></blockquote><p><strong>下面介绍MATLAB中生成高斯白噪声的三种方法：</strong></p><hr><h2 id="wgn"><a href="#wgn" class="headerlink" title="wgn"></a>wgn</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">noise = wgn(m,n,power)</span><br></pre></td></tr></table></figure><blockquote><p>产生m行n列的高斯白噪声矩阵，power为以dBW为单位的指定输出噪声强度。</p><p>0dBW=10lg(P/1W)=10lg(1W)=10lg(1000mW)=10lg(P/1mW)=30dBm</p></blockquote><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">x = <span class="number">1</span>:<span class="number">1</span>:<span class="number">1000</span>;</span><br><span class="line">y = wgn(<span class="number">1000</span>,<span class="number">1</span>,<span class="number">0</span>);</span><br></pre></td></tr></table></figure><div align=center><img width="61.8%" height="61.8%" src="https://i.loli.net/2021/09/02/RfghOH4MYLvstEj.jpg" alt="wgn"/></div><hr><h2 id="awgn"><a href="#awgn" class="headerlink" title="awgn"></a>awgn</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">noise = awgn(st,SNR,<span class="string">&#x27;measured&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>在某一信号St中加入高斯白噪声，高斯白噪声的的维度与信号st的维度一致。</p><p>awgn(st,10)是假设信号st的功率为0dBW，然后添加噪声，使得SNR=10;</p><p>awgn(st,SNR,’measured’)是先测量信号st的功率，然后添加噪声，使得SNR=10;</p></blockquote><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">x = (<span class="number">0</span>:<span class="number">2</span>*<span class="built_in">pi</span>/<span class="number">100</span>:<span class="number">2</span>*<span class="built_in">pi</span><span class="number">-2</span>*<span class="built_in">pi</span>/<span class="number">100</span>)&#x27;;</span><br><span class="line">y = <span class="built_in">sin</span>(x);</span><br><span class="line">z = awgn(y,<span class="number">10</span>,<span class="string">&#x27;measured&#x27;</span>);</span><br></pre></td></tr></table></figure><div align=center><img width="61.8%" height="61.8%" src="https://i.loli.net/2021/09/02/weR5dulHmEb9o4h.jpg" alt="awgn"/></div><hr><h2 id="randn"><a href="#randn" class="headerlink" title="randn"></a>randn</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">noise = mu + sigma*randn(m,n)</span><br></pre></td></tr></table></figure><blockquote><p>产生m行n列的高斯白噪声矩阵，$\mu$为其均值，$\sigma$为其标准差。</p><p>如果要在某一信号st中加入高斯白噪声，一般将信号st作为高斯白噪声的均值。</p></blockquote><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">x = (<span class="number">0</span>:<span class="number">2</span>*<span class="built_in">pi</span>/<span class="number">100</span>:<span class="number">2</span>*<span class="built_in">pi</span><span class="number">-2</span>*<span class="built_in">pi</span>/<span class="number">100</span>)&#x27;;</span><br><span class="line">y = <span class="built_in">sin</span>(x);</span><br><span class="line">z = y + <span class="number">0.25</span>*<span class="built_in">randn</span>(<span class="number">100</span>,<span class="number">1</span>)</span><br></pre></td></tr></table></figure><div align=center><img width="61.8%" height="61.8%" src="https://i.loli.net/2021/09/02/pjqLd9KbaolOZg3.jpg" alt="randn"/></div><p><strong>本文作者水平有限，如有错误，恳请批评指正！</strong></p>]]></content>
      
      
      <categories>
          
          <category> Matlab </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Matlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/08/25/hello-world/"/>
      <url>/2021/08/25/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><p>欢迎来到怀帅的世界！</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ </span><br><span class="line">clc</span><br><span class="line">clear</span><br><span class="line">close all</span><br><span class="line">tic</span><br><span class="line"><span class="built_in">set</span>(0,<span class="string">&#x27;defaultfigurecolor&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">%% ***************************²ÎÊýÉèÖÃ**************************** %%</span><br><span class="line">%  ÐÅºÅ²ÎÊý</span><br><span class="line">c  = 3  * 1e+8;                                                            % ¹âËÙ</span><br><span class="line"><span class="built_in">fc</span> = 2  * 1e+9;                                                            % ÔØ²¨ÆµÂÊ</span><br><span class="line">lambda = c / <span class="built_in">fc</span>;                                                           % À×´ï²¨³¤</span><br><span class="line">Tr = 5  * 1e-6;                                                            % ÐÅºÅ³ÖÐøÊ±¼ä</span><br><span class="line">Br = 30 * 1e+6;                                                            % ÐÅºÅµ÷Æµ´ø¿í</span><br><span class="line">Kr = Br / Tr;                                                              % µ÷ÆµÐ±ÂÊ</span><br><span class="line"></span><br><span class="line">alpha_os = 4.0;                                                            % ¹ý²ÉÑùÂÊ</span><br><span class="line">Fr = alpha_os * Br;                                                        % ¿ìÊ±¼ä²ÉÑùÆµÂÊ</span><br><span class="line">Nr = round( Fr * Tr );                                                     % ¿ìÊ±¼ä²ÉÑùµãÊý</span><br><span class="line"></span><br><span class="line">disp([<span class="string">&#x27;ÀíÂÛ¾àÀë·Ö±æÂÊÎª£º&#x27;</span>, num2str( c / ( 2 * Br ) ), <span class="string">&#x27;m&#x27;</span>]);</span><br><span class="line">disp([<span class="string">&#x27;ÀíÂÛ²â»æ´ø´ø¿íÎª£º&#x27;</span>, num2str( c / ( 2 * Br ) * Nr ), <span class="string">&#x27;m&#x27;</span>]);</span><br><span class="line">disp(<span class="string">&#x27;--------------------------------&#x27;</span>);</span><br><span class="line">%  Ä¿±ê²ÎÊý</span><br><span class="line">position_target = [ 2997, 3000, 3050 ];                                    % Ä¿±êÏà¶ÔÀ×´ïµÄÐ±¾à</span><br><span class="line">sigma_target = [ 1, 1, 1 ];                                                % Ä¿±êµÄºóÏòÉ¢ÉäÏµÊý</span><br><span class="line">num_target = length( position_target );                                    % Ä¿±êÊýÁ¿</span><br><span class="line">disp([<span class="string">&#x27;Ä¿±êAµÄÊµ¼Ê¾àÀëÎª£º&#x27;</span>, num2str( position_target(1) ), <span class="string">&#x27;m&#x27;</span>]);</span><br><span class="line">disp([<span class="string">&#x27;Ä¿±êBµÄÊµ¼Ê¾àÀëÎª£º&#x27;</span>, num2str( position_target(2) ), <span class="string">&#x27;m&#x27;</span>]);</span><br><span class="line">disp([<span class="string">&#x27;Ä¿±êCµÄÊµ¼Ê¾àÀëÎª£º&#x27;</span>, num2str( position_target(3) ), <span class="string">&#x27;m&#x27;</span>]);</span><br><span class="line">disp(<span class="string">&#x27;--------------------------------&#x27;</span>);</span><br><span class="line">%  ²â¾à²ÎÊý</span><br><span class="line">Rmin = 1000;</span><br><span class="line">Rmax = 7000;</span><br><span class="line">Rwid = Rmax - Rmin;                                                        % ×î´ó²â¾à³¤¶È</span><br><span class="line">Twid = 2 * Rwid / c;                                                       % »Ø²¨´°µÄ³¤¶È</span><br><span class="line">Nwid = round( Fr * Twid );                                                 % »Ø²¨ÐÅºÅµÄ²ÉÑùµãÊý</span><br><span class="line">%% ***************************²â¾à·ÖÎö**************************** %%</span><br><span class="line">%  ·¢ÉäÐÅºÅ</span><br><span class="line">t_tau_1 = linspace( 0, Nr-1, Nr ) / Nr * Tr;</span><br><span class="line">sot = ( t_tau_1 &lt;= Tr ) .* exp( 1j * pi * Kr * ( t_tau_1 - Tr/2 ).^2 );</span><br><span class="line">%  »Ø²¨ÐÅºÅ</span><br><span class="line">t_tau_2 = linspace( 2*Rmin/c, 2*Rmax/c, Nwid );</span><br><span class="line"></span><br><span class="line">srt_r = zeros( 1, Nwid );</span><br><span class="line"><span class="keyword">for</span> i = 1 : num_target</span><br><span class="line">    t_tau_3 = t_tau_2 - 2 * position_target(i) / c;</span><br><span class="line">    wr = abs( t_tau_3 ) &lt;= Tr/2;</span><br><span class="line">    srt_target_r = sigma_target(i) * wr .* exp( 1j * pi * Kr * t_tau_3.^2 ) *...</span><br><span class="line">                                           exp( -1j * 4*pi * <span class="built_in">fc</span> * position_target(i) / c );</span><br><span class="line">    srt_r = srt_r + srt_target_r;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">figure</span><br><span class="line">subplot(311)</span><br><span class="line">plot( t_tau_1*1e+6, real(sot), <span class="string">&#x27;b&#x27;</span> );hold on;xlabel(<span class="string">&#x27;Ê±¼ä/\mus&#x27;</span>);ylabel(<span class="string">&#x27;·ù¶È&#x27;</span>);</span><br><span class="line">plot( t_tau_2*1e+6, real(srt_r), <span class="string">&#x27;r&#x27;</span> );hold on;xlabel(<span class="string">&#x27;Ê±¼ä/\mus&#x27;</span>);ylabel(<span class="string">&#x27;·ù¶È&#x27;</span>);title(<span class="string">&#x27;·¢ÉäÐÅºÅ&amp;»Ø²¨ÐÅºÅ&#x27;</span>);</span><br><span class="line">grid on;axis([0, 50, -4, 4]);</span><br><span class="line"></span><br><span class="line">%  Æ¥ÅäÂË²¨</span><br><span class="line">Nfft = 2^nextpow2( 2 * Nwid - 1 );</span><br><span class="line">Srf_r = fft( srt_r, Nfft );</span><br><span class="line"></span><br><span class="line">Hrf_2 = conj( fft( sot, Nfft ) );                                         </span><br><span class="line"></span><br><span class="line">Yrf_r = Srf_r .* Hrf_2;</span><br><span class="line">yrt_r = fftshift( ifft( Yrf_r ) );</span><br><span class="line"></span><br><span class="line">%  ²¹Æë³¤¶È</span><br><span class="line">N0 = round( Nfft/2 - Nr/2 );</span><br><span class="line">yrt_r_1 = yrt_r( N0 : N0 + Nwid - 1 );</span><br><span class="line">%  ¹éÒ»»¯</span><br><span class="line">yrt_r_2 = 20 * log10( abs( yrt_r_1 ) ./ max( abs( yrt_r_1 ) ) + eps);</span><br><span class="line"></span><br><span class="line">% SNR_n = 13;</span><br><span class="line">% signal = awgn( yrt_r_1, SNR_n, <span class="string">&#x27;measured&#x27;</span> );</span><br><span class="line"></span><br><span class="line">%  ¾àÀë²âÁ¿</span><br><span class="line">R_tau = t_tau_2*c/2;                                                      </span><br><span class="line"></span><br><span class="line">R_peaks = findpeaks( yrt_r_2 );</span><br><span class="line">R_peaks = sort( R_peaks, <span class="string">&#x27;descend&#x27;</span> );</span><br><span class="line">R_dect_1 = R_tau( yrt_r_2 == R_peaks(1) );</span><br><span class="line">R_dect_2 = R_tau( yrt_r_2 == R_peaks(2) );</span><br><span class="line">R_dect_3 = R_tau( yrt_r_2 == R_peaks(3) );</span><br><span class="line">R_dect = [ R_dect_1, R_dect_2, R_dect_3 ];</span><br><span class="line">R_dect = sort( R_dect, <span class="string">&#x27;ascend&#x27;</span> );</span><br><span class="line">disp([<span class="string">&#x27;Ä¿±êAµÄ²âÁ¿¾àÀëÎª£º&#x27;</span>, num2str( R_dect(1)), <span class="string">&#x27;m&#x27;</span>]);</span><br><span class="line">disp([<span class="string">&#x27;Ä¿±êBµÄ²âÁ¿¾àÀëÎª£º&#x27;</span>, num2str( R_dect(2)), <span class="string">&#x27;m&#x27;</span>]);</span><br><span class="line">disp([<span class="string">&#x27;Ä¿±êCµÄ²âÁ¿¾àÀëÎª£º&#x27;</span>, num2str( R_dect(3)), <span class="string">&#x27;m&#x27;</span>]);</span><br><span class="line">disp(<span class="string">&#x27;--------------------------------&#x27;</span>);</span><br><span class="line"></span><br><span class="line">subplot(312)</span><br><span class="line">plot( R_tau, abs(yrt_r_1) );xlabel(<span class="string">&#x27;¾àÀë/m&#x27;</span>);ylabel(<span class="string">&#x27;·ù¶È&#x27;</span>);title(<span class="string">&#x27;À×´ï»Ø²¨¾­¹ýÂö³åÑ¹Ëõ&#x27;</span>);</span><br><span class="line">grid on;axis([0, 7500, 0, 800]);</span><br><span class="line">subplot(313)</span><br><span class="line">plot( R_tau, yrt_r_2 );xlabel(<span class="string">&#x27;¾àÀë/m&#x27;</span>);ylabel(<span class="string">&#x27;·ù¶È/dB&#x27;</span>);title(<span class="string">&#x27;À×´ï»Ø²¨¾­¹ýÂö³åÑ¹Ëõ&#x27;</span>);</span><br><span class="line">grid on;axis([0, 7500, -40, 1]);</span><br><span class="line">% ¾Ö²¿·Å´ó</span><br><span class="line">figure</span><br><span class="line">subplot(211)</span><br><span class="line">plot( R_tau, abs(yrt_r_1) );xlabel(<span class="string">&#x27;¾àÀë/m&#x27;</span>);ylabel(<span class="string">&#x27;·ù¶È&#x27;</span>);title(<span class="string">&#x27;À×´ï»Ø²¨¾­¹ýÂö³åÑ¹Ëõ&#x27;</span>);</span><br><span class="line">grid on;axis([2900, 3100, 250, 800]);</span><br><span class="line">subplot(212)</span><br><span class="line">plot( R_tau, yrt_r_2 );xlabel(<span class="string">&#x27;¾àÀë/m&#x27;</span>);ylabel(<span class="string">&#x27;·ù¶È/dB&#x27;</span>);title(<span class="string">&#x27;À×´ï»Ø²¨¾­¹ýÂö³åÑ¹Ëõ&#x27;</span>);</span><br><span class="line">grid on;axis([2900, 3100, -20, 1]);</span><br><span class="line"></span><br><span class="line">%% -------------------------------------------------------------- %%</span><br><span class="line">toc</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Text </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Text </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
